package lu.uni.lassy.excalibur.examples.helloworld.usecases {
	import lu.uni.lassy.messir.libraries.calendar
	import lu.uni.lassy.messir.libraries.collections
	import lu.uni.lassy.messir.libraries.math
	import lu.uni.lassy.messir.libraries.primitives
	import lu.uni.lassy.messir.libraries.string
	import lu.uni.lassy.excalibur.examples.helloworld.environment
	import lu.uni.lassy.excalibur.example.concepts.primarytypes.classes
	import lu.uni.lassy.excalibur.examples.helloworld.concepts.messir.msr
	Use Case Model {

		use case system subfunction sfTriggerAlert(AMessage: dtString, AReport: dtString) {
			actor actMedicalDepartement[primary, active]
			actor actCoordinator[secondary]
			returned messages {
				ieAlertMessage(AMessage, AReport) returned to actCoordinator
			}
		}

		use case system subfunction sfConfirmAlert() {
			actor actCoordinator[primary, active]
			actor actAll[secondary]
			
			returned messages {
			//!!!!!!!!!!!!!!!!!!!!!!!!!!	CRISIS STATE SET TO ONE !!!!!!!!!!!!!!!!
				ieStart(AMessage) returned to actAll
			}
		}

		use case system subfunction sfSendMission(Receiver:dtString, Mission:dtMission) {
			actor actCoordinator[primary, active]
			actor actTeamLeader[secondary]
			
			returned messages {
				ieNotify(AMission) returned to actTeamLeader
			}
		}
		
		use case system subfunction sfAcceptMission(Mission: dtMission) {
			actor actTeamLeader [primary, active]
			actor actCoordinator [secondary]
			actor actTeamMembers [secondary]
			returned messages {
				ieAddTeam(AMission) returned to actCoordinator
				ieSendInformation(AMission) returned to actTeamMembers 			}
		}
			use case system subfunction sfAddZone(Type: enTypeOne, ShowZone: ptBoolean, Height: dtInteger, Width: dtInteger, Location: dtString) {
			actor actCoordinator[primary, active]
			actor actAll [secondary]
			returned messages {
				ieMakeNews(ANews) returned to actAll
				ieUpdateMap(AZone) returned to actAll
				
			}
		}
			use case system subfunction sfStatistiques(Mission: dtMission) {
			actor actCoordinator[primary, active]
			returned messages {
				ieStats() returned to actCoordinator
			}
		}
			use case system subfunction sfDeleteZone(Zone: dtZone) {
			actor actCoordinator[primary, active]
			actor actAll [secondary]
			returned messages {
				ieUpdateMap(AZone) returned to actAll			
			}
		}
		
		use case system subfunction sfAffectedTeamToMission(AMission:dtMission) {
			actor actCoordinator[primary, active]
			returned messages {
				ieShowPerson(actTeamLeader) returned to actCoordinator			
			}
		}
		use case system subfunction sfActivityLabel(AMission:dtMission) {
			actor actCoordinator[primary, active]
			returned messages {
				ieActivityColor(ColorGreen) returned to actCoordinator			
			}
		}
		
		use case system subfunction sfSetZone(Zone: dtZone, Type: enTypeOne, ShowZone: ptBoolean, Height: dtInteger, Width: dtInteger, GPSLocation: dtGeolocation) {
			actor actCoordinator[primary, active]
			returned messages {
				ieNotify(ANews) returned to actAll
				ieUpdateMap(AZone) returned to actAll
			}
		}
		
		
		use case system subfunction sfSafePlaceFinder(GPSLocation: dtGeolocation) {
			actor actCoordinator[primary, active]
			actor actAll [secondary]
			returned messages {
				ieLinkToRoute(Destination) returned to actAll			
			}
		}
		use case system subfunction sfFindPerson(Name: dtString, Function: dtString) {
			actor actCoordinator[primary, active]
			actor actAll [secondary]
			returned messages {
				ieDisplay(Person) returned to actAll			
			}
		}
		use case system subfunction sfAlertGPSZone(GPSLocation: dtGeolocation, Zones: AZones ) {
			actor actCoordinator[primary, active]
			actor actAll [secondary]
			returned messages {
				ieWarning() returned to actAll			
			}
		}

		use case system subfunction oeHelloWorld() {
			actor actYou[primary, active]
			returned messages {
				ieHelloWorld(AMessage) returned to actYou
			}
		}

		use case system usergoal ugHelloWorld() {
			actor actYou[primary, active]
			actor actMsrCreator[secondary, active]
			reuse oeCreateSystemAndEnvironment[1 .. 1]
			reuse oeHelloWorld[1 .. *]
			step a:actMsrCreator executes oeCreateSystemAndEnvironment()
			step b:actYou executes oeHelloWorld
			ordering constraint "at least a"
			ordering constraint "if b then previously a"
		}

		use case instance uciSimpleAndComplete:ugHelloWorld {
			actors {
				theCreator:actMsrCreator you:actYou
			}
			use case steps {
				theCreator executed instanceof subfunction oeCreateSystemAndEnvironment {
				}
				you executed instanceof subfunction oeHelloWorld {
					oeHelloWorld.ieHelloWorld('HelloWorld !') returned to you
				}
			}
		}
		//    use case instance uciSimpleAndComplete : ugHelloWorld {

		//      related test case instance lu.uni.lassy.excalibur.examples.helloworld.tests.instances.instance01
		use case system subfunction sfGeo() {
			actor actCoordinator[primary, active]
			returned messages {
				ieGeo returned to actCoordinator
			}
		}
	}
}